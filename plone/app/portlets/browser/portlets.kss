.unmanagedPortletActions .delete:click {
    evt-click-preventdefault: true;
    action-server: inlineDeletePortlet;
    inlineDeletePortlet-portlethash: kssAttr('portlethash', true);
    inlineDeletePortlet-viewname: kssAttr('viewname', true);
}

/* These were the pre-dnd actions to move portlets up and down within one
   portletmanager. We probably don't need them anymore. Hence that we do a
   setStyle client action to hide all arrows, so effectively these events
   can't be fired from the UI
*/
.managedPortletActions .up:click {
    evt-click-preventdefault: true;
    action-server: inlineMovePortletUp;
    inlineMovePortletUp-portlethash: kssAttr('portlethash', true);
    inlineMovePortletUp-viewname: kssAttr('viewname', true);
} 

.managedPortletActions .down:click {
    evt-click-preventdefault: true;
    action-server: inlineMovePortletDown;
    inlineMovePortletDown-portlethash: kssAttr('portlethash', true);
    inlineMovePortletDown-viewname: kssAttr('viewname', true);
}

.managedPortletActions:load {
    action-client: setStyle;
    setStyle-name: display;
    setStyle-value: none;
}

/* Allow dragging on children */
.kssattr-viewname-manage-portlets div.portlet:yuidnd-dragstart,
.kssattr-viewname-manage-dashboard div.portlet:yuidnd-dragstart {
   evt-yuidnd-dragstart-action: delete;
}

/* Allow dropping on the container */
.kssattr-viewname-manage-portlets:yuidnd-drop,
.kssattr-viewname-manage-dashboard:yuidnd-drop {
    evt-yuidnd-drop-action: order;
}

/* What to do when dropping was succesfull */
.kssattr-viewname-manage-portlets div.portlet:yuidnd-dragsuccess,
.kssattr-viewname-manage-dashboard div.portlet:yuidnd-dragsuccess {
    action-server: dropPortlet;
    dropPortlet-portlethash: kssAttr('portlethash', true);
    dropPortlet-dropContainer: pass(dropContainerId);
    dropPortlet-dropIndex: pass(dropIndex);
}
